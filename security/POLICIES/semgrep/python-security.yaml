# Custom Semgrep security rules for BazBOM Python code
# Following PYSEC_OMEGA security standards

rules:
  - id: dangerous-xml-parsing
    pattern: |
      import xml.etree.ElementTree as ET
    message: |
      Using xml.etree.ElementTree is vulnerable to XXE attacks.
      Use defusedxml instead: `from defusedxml import ElementTree as ET`
    severity: ERROR
    languages: [python]
    metadata:
      cwe: CWE-611
      owasp: A05:2021 - Security Misconfiguration
      references:
        - https://docs.python.org/3/library/xml.html#xml-vulnerabilities
        - https://github.com/tiran/defusedxml

  - id: subprocess-shell-true
    pattern: subprocess.$FUNC(..., shell=True, ...)
    message: |
      Using shell=True is dangerous and can lead to command injection.
      Use list arguments instead: subprocess.run(['cmd', 'arg1', 'arg2'])
    severity: ERROR
    languages: [python]
    metadata:
      cwe: CWE-78
      owasp: A03:2021 - Injection

  - id: yaml-unsafe-load
    patterns:
      - pattern: yaml.load($DATA, ...)
      - pattern-not: yaml.load($DATA, Loader=yaml.SafeLoader)
      - pattern-not: yaml.safe_load(...)
    message: |
      yaml.load() without SafeLoader is unsafe and can execute arbitrary code.
      Use yaml.safe_load() instead.
    severity: ERROR
    languages: [python]
    metadata:
      cwe: CWE-502
      owasp: A08:2021 - Software and Data Integrity Failures

  - id: pickle-unsafe-load
    patterns:
      - pattern: pickle.load(...)
      - pattern: pickle.loads(...)
    message: |
      pickle.load() can execute arbitrary code from untrusted data.
      Never use pickle for untrusted data. Use JSON instead.
    severity: WARNING
    languages: [python]
    metadata:
      cwe: CWE-502
      owasp: A08:2021 - Software and Data Integrity Failures

  - id: exec-eval-usage
    patterns:
      - pattern: exec(...)
      - pattern: eval(...)
    message: |
      exec() and eval() can execute arbitrary code and should never be used.
      If absolutely necessary, use ast.literal_eval() for safe evaluation.
    severity: ERROR
    languages: [python]
    metadata:
      cwe: CWE-94
      owasp: A03:2021 - Injection

  - id: sql-string-concatenation
    patterns:
      - pattern: $CURSOR.execute(f"... {$VAR} ...")
      - pattern: $CURSOR.execute("..." + $VAR + "...")
      - pattern: $CURSOR.execute("..." % $VAR)
    message: |
      SQL query uses string concatenation which can lead to SQL injection.
      Use parameterized queries: cursor.execute("SELECT * FROM t WHERE id = ?", (id,))
    severity: ERROR
    languages: [python]
    metadata:
      cwe: CWE-89
      owasp: A03:2021 - Injection

  - id: hardcoded-secret
    patterns:
      - pattern: $VAR = "..."
      - metavariable-regex:
          metavariable: $VAR
          regex: .*(password|secret|token|api_key|private_key).*
      - metavariable-regex:
          metavariable: $VAR
          regex: (?i).*(pwd|pass).*
    message: |
      Potential hardcoded secret detected. Secrets should be loaded from
      environment variables or secure vaults, never hardcoded.
    severity: WARNING
    languages: [python]
    metadata:
      cwe: CWE-798
      owasp: A07:2021 - Identification and Authentication Failures

  - id: insecure-random
    patterns:
      - pattern: random.$FUNC(...)
      - pattern-not-inside: |
          import secrets
          ...
    message: |
      Using random module for security purposes is insecure.
      Use secrets module instead: secrets.token_hex(), secrets.token_urlsafe()
    severity: WARNING
    languages: [python]
    metadata:
      cwe: CWE-330
      owasp: A02:2021 - Cryptographic Failures

  - id: unvalidated-redirect
    patterns:
      - pattern: return redirect($URL)
      - pattern-not: return redirect("/...")
    message: |
      Unvalidated redirect can lead to phishing attacks.
      Validate redirect URLs against a whitelist.
    severity: WARNING
    languages: [python]
    metadata:
      cwe: CWE-601
      owasp: A01:2021 - Broken Access Control

  - id: path-traversal-risk
    patterns:
      - pattern: open($PATH, ...)
      - pattern-not: open("/...", ...)
      - metavariable-regex:
          metavariable: $PATH
          regex: .*(input|request|param|arg).*
    message: |
      Opening files from user input can lead to path traversal attacks.
      Validate paths: Path(user_path).resolve().is_relative_to(base_dir)
    severity: WARNING
    languages: [python]
    metadata:
      cwe: CWE-22
      owasp: A01:2021 - Broken Access Control

  - id: logging-sensitive-data
    patterns:
      - pattern: $LOG.$LEVEL(..., $VAR, ...)
      - metavariable-regex:
          metavariable: $VAR
          regex: .*(token|password|secret|key|credential).*
    message: |
      Logging sensitive data can lead to information disclosure.
      Never log tokens, passwords, or other secrets.
    severity: WARNING
    languages: [python]
    metadata:
      cwe: CWE-532
      owasp: A09:2021 - Security Logging and Monitoring Failures

  - id: weak-cryptography
    patterns:
      - pattern: hashlib.md5(...)
      - pattern: hashlib.sha1(...)
    message: |
      MD5 and SHA1 are cryptographically weak and should not be used.
      Use SHA256 or SHA3 instead: hashlib.sha256()
    severity: WARNING
    languages: [python]
    metadata:
      cwe: CWE-327
      owasp: A02:2021 - Cryptographic Failures

  - id: unsafe-deserialization
    patterns:
      - pattern: json.loads($DATA, ...)
      - pattern-inside: |
          $DATA = $REQUEST.$ATTR
    message: |
      Deserializing untrusted JSON can be dangerous if object_hook is used.
      Validate JSON schema after deserialization.
    severity: INFO
    languages: [python]
    metadata:
      cwe: CWE-502

  - id: missing-timeout
    patterns:
      - pattern: requests.$FUNC($URL, ...)
      - pattern-not: requests.$FUNC($URL, ..., timeout=$T, ...)
    message: |
      HTTP request without timeout can hang indefinitely.
      Always specify a timeout: requests.get(url, timeout=30)
    severity: WARNING
    languages: [python]
    metadata:
      cwe: CWE-400
      owasp: A05:2021 - Security Misconfiguration
