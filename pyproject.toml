[build-system]
requires = []
build-backend = []

[project]
name = "bazbom"
description = "Bazel-native SBOM and SCA system for Java/JVM"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "Apache-2.0"}

[tool.pytest.ini_options]
# Test discovery
testpaths = ["tools/supplychain/tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Output and behavior  
addopts = [
    "-q",
    "--strict-config",
    "--strict-markers",
    "--tb=short",
    "--disable-warnings",
    "--cov=tools/supplychain",
    "--cov-report=term-missing:skip-covered",
    "--cov-branch",
    "--cov-fail-under=90",
    "--maxfail=1",
    "--randomly-seed=1337",
    "--durations=10",
]

# Markers
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "network: marks tests that require network access",
    "performance: marks tests that measure performance",
]

# Warnings
filterwarnings = [
    "error::DeprecationWarning",
    "error::PendingDeprecationWarning",
    "ignore::pytest.PytestUnraisableExceptionWarning",
    "ignore::ResourceWarning",
]

# Test execution optimization
# xfail_strict ensures tests marked as xfail actually fail if they pass
xfail_strict = true

[tool.coverage.run]
branch = true
source = ["tools/supplychain"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
# Exclude patterns from coverage
exclude_lines = [
    # Import guard blocks
    "except ImportError:",
    "print.*Install with:",
    "sys.exit\\(1\\)",
    
    # Standard pragma
    "pragma: no cover",
    
    # Don't complain about missing debug-only code
    "def __repr__",
    "if self\\.debug",
    
    # Don't complain if tests don't hit defensive assertion code
    "raise AssertionError",
    "raise NotImplementedError",
    
    # Don't complain if non-runnable code isn't run
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

fail_under = 90
skip_covered = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.json]
output = "coverage.json"
