# Root build file for BazBOM

# Generate dependency list from maven_install.json (or fall back to WORKSPACE)
genrule(
    name = "extract_deps",
    srcs = [
        "WORKSPACE",
        "maven_install.json",
    ],
    outs = ["workspace_deps.json"],
    cmd = "$(location //tools/supplychain:extract_maven_deps) --workspace $(location WORKSPACE) --maven-install-json $(location maven_install.json) --output $@",
    tools = ["//tools/supplychain:extract_maven_deps"],
    visibility = ["//visibility:public"],
)

# Generate SBOM from extracted dependencies
genrule(
    name = "workspace_sbom",
    srcs = [":workspace_deps.json"],
    outs = ["workspace_sbom.spdx.json"],
    cmd = "$(location //tools/supplychain:write_sbom) --input $< --output $@ --name bazbom-workspace --format spdx",
    tools = ["//tools/supplychain:write_sbom"],
    visibility = ["//visibility:public"],
)

# Generate CycloneDX SBOM (optional format)
genrule(
    name = "workspace_sbom_cyclonedx",
    srcs = [":workspace_deps.json"],
    outs = ["workspace_sbom.cdx.json"],
    cmd = "$(location //tools/supplychain:write_sbom) --input $< --output $@ --name bazbom-workspace --format cyclonedx",
    tools = ["//tools/supplychain:write_sbom"],
    visibility = ["//visibility:public"],
)

# Run SCA scan using OSV (requires network access)
genrule(
    name = "sca_scan_osv",
    srcs = [":workspace_sbom"],
    outs = ["sca_findings.json"],
    cmd = "$(location //tools/supplychain:osv_query) --sbom $< --output $@ --batch || echo '{\"packages_scanned\": 0, \"vulnerabilities_found\": 0, \"vulnerabilities\": []}' > $@",
    tools = ["//tools/supplychain:osv_query"],
    tags = ["requires-network"],
    visibility = ["//visibility:public"],
)

# Convenience alias to match docs/simple invocations
alias(
    name = "sca_scan",
    actual = ":sca_scan_osv",
    visibility = ["//visibility:public"],
)

# Convert SCA findings to SARIF
genrule(
    name = "sca_sarif",
    srcs = [":sca_findings.json"],
    outs = ["sca_findings.sarif"],
    cmd = "$(location //tools/supplychain:sarif_adapter) --input $< --output $@",
    tools = ["//tools/supplychain:sarif_adapter"],
    visibility = ["//visibility:public"],
)

# Generate dependency graph (JSON format) from workspace_deps
genrule(
    name = "dep_graph_json",
    srcs = [":workspace_deps.json"],
    outs = ["dep_graph.json"],
    cmd = "$(location //tools/supplychain:graph_generator) --deps $< --output-json $@",
    tools = ["//tools/supplychain:graph_generator"],
    visibility = ["//visibility:public"],
)

# Generate dependency graph (GraphML format) from workspace_deps
genrule(
    name = "dep_graph_graphml",
    srcs = [":workspace_deps.json"],
    outs = ["dep_graph.graphml"],
    cmd = "$(location //tools/supplychain:graph_generator) --deps $< --output-graphml $@",
    tools = ["//tools/supplychain:graph_generator"],
    visibility = ["//visibility:public"],
)

# Generate SLSA provenance for workspace SBOM
genrule(
    name = "workspace_provenance",
    srcs = [":workspace_sbom"],
    outs = ["workspace_sbom.provenance.json"],
    cmd = "$(location //tools/supplychain:provenance_builder) --artifact workspace_sbom.spdx.json --output $@",
    tools = ["//tools/supplychain:provenance_builder"],
    visibility = ["//visibility:public"],
)

# Filegroup to collect all SBOMs
filegroup(
    name = "sbom_all",
    srcs = [
        ":workspace_sbom",
    ],
    visibility = ["//visibility:public"],
)

# Filegroup to collect all SBOM formats (SPDX + CycloneDX)
filegroup(
    name = "sbom_all_formats",
    srcs = [
        ":workspace_sbom",
        ":workspace_sbom_cyclonedx",
    ],
    visibility = ["//visibility:public"],
)

# Filegroup for dependency graphs
filegroup(
    name = "dep_graph_all",
    srcs = [
        ":dep_graph_json",
        ":dep_graph_graphml",
    ],
    visibility = ["//visibility:public"],
)

# Filegroup for all supply chain artifacts
filegroup(
    name = "supply_chain_all",
    srcs = [
        ":workspace_sbom",
        ":dep_graph_json",
        ":dep_graph_graphml",
        ":workspace_provenance",
        ":sca_findings.json",
        ":sca_sarif",
        ":conflict_report",
        ":license_report",
        ":metrics_report",
        ":supply_chain_risk_report",
        ":sca_findings_with_vex",
    ],
    visibility = ["//visibility:public"],
)

# CSV export targets for easy data analysis
genrule(
    name = "sbom_csv",
    srcs = [":workspace_sbom"],
    outs = ["workspace_sbom.csv"],
    cmd = "$(location //tools/supplychain:csv_exporter) --sbom $< --output $@",
    tools = ["//tools/supplychain:csv_exporter"],
    visibility = ["//visibility:public"],
)

genrule(
    name = "vulnerabilities_csv",
    srcs = [":sca_findings_with_vex"],
    outs = ["vulnerabilities.csv"],
    cmd = "$(location //tools/supplychain:csv_exporter) --findings $< --output $@",
    tools = ["//tools/supplychain:csv_exporter"],
    visibility = ["//visibility:public"],
)

genrule(
    name = "licenses_csv",
    srcs = [":license_report"],
    outs = ["licenses.csv"],
    cmd = "$(location //tools/supplychain:csv_exporter) --license-report $< --output $@",
    tools = ["//tools/supplychain:csv_exporter"],
    visibility = ["//visibility:public"],
)

# Generate security badge for README
genrule(
    name = "security_badge",
    srcs = [":sca_findings_with_vex"],
    outs = ["security_badge.json"],
    cmd = "$(location //tools/supplychain:badge_generator) --findings $< --output $@",
    tools = ["//tools/supplychain:badge_generator"],
    visibility = ["//visibility:public"],
)

# Detect dependency version conflicts
genrule(
    name = "conflict_report",
    srcs = [":workspace_deps.json"],
    outs = ["conflicts.json"],
    cmd = "$(location //tools/supplychain:conflict_detector) --input $< --output $@",
    tools = ["//tools/supplychain:conflict_detector"],
    visibility = ["//visibility:public"],
)

# Generate license compliance report
genrule(
    name = "license_report",
    srcs = [":workspace_deps.json"],
    outs = ["license_report.json"],
    cmd = "$(location //tools/supplychain:license_analyzer) --input $< --output $@ --check-conflicts --flag-copyleft",
    tools = ["//tools/supplychain:license_analyzer"],
    visibility = ["//visibility:public"],
)

# Aggregate metrics from all analyses
genrule(
    name = "metrics_report",
    srcs = [
        ":workspace_sbom",
        ":sca_findings.json",
        ":license_report",
        ":conflict_report",
    ],
    outs = ["supply_chain_metrics.json"],
    cmd = "$(location //tools/supplychain:metrics_aggregator) --sbom $(location :workspace_sbom) --sca-findings $(location :sca_findings.json) --license-report $(location :license_report) --conflicts $(location :conflict_report) --output $@",
    tools = ["//tools/supplychain:metrics_aggregator"],
    visibility = ["//visibility:public"],
)

# Supply chain risk analysis
genrule(
    name = "supply_chain_risk_report",
    srcs = [":workspace_sbom"],
    outs = ["supply_chain_risks.json"],
    cmd = "$(location //tools/supplychain:supply_chain_risk) --sbom $< --output $@ --check-typosquatting --check-deprecated; exit 0",
    tools = ["//tools/supplychain:supply_chain_risk"],
    tags = ["requires-network"],
    visibility = ["//visibility:public"],
)

# Apply VEX statements to filter findings
genrule(
    name = "sca_findings_with_vex",
    srcs = [
        ":sca_findings.json",
        "//vex:vex_statements",
    ],
    outs = ["sca_findings_filtered.json"],
    cmd = "if [ -d vex/statements ] && [ -n \"$$(find vex/statements -name '*.json' 2>/dev/null)\" ]; then $(location //tools/supplychain:vex_processor) --vex-dir=vex/statements --sca-findings $(location :sca_findings.json) --output $@; else cp $(location :sca_findings.json) $@; fi",
    tools = ["//tools/supplychain:vex_processor"],
    visibility = ["//visibility:public"],
)

# Policy enforcement check
genrule(
    name = "policy_check_report",
    srcs = [
        ":sca_findings_filtered.json",
        ":license_report",
        ":conflict_report",
        ":supply_chain_risk_report",
    ],
    outs = ["policy_check.json"],
    cmd = "$(location //tools/supplychain:policy_check) --findings $(location :sca_findings_filtered.json) --license-report $(location :license_report) --conflicts $(location :conflict_report) --risk-report $(location :supply_chain_risk_report) --max-critical 0 --max-high 10 --output $@ || echo '{\"violations\": []}' > $@",
    tools = ["//tools/supplychain:policy_check"],
    visibility = ["//visibility:public"],
)

# Generate compliance reports (Executive, SOC2, Attribution, Audit Trail)
genrule(
    name = "compliance_reports",
    srcs = [
        ":workspace_sbom",
        ":sca_findings_filtered.json",
        ":license_report",
        "//tools/supplychain:compliance_templates",
    ],
    outs = [
        "compliance-reports/executive_summary.html",
        "compliance-reports/soc2_report.html",
        "compliance-reports/attribution.html",
        "compliance-reports/audit_trail.html",
    ],
    cmd = "mkdir -p $$(dirname $(location compliance-reports/executive_summary.html)) && " +
          "$(location //tools/supplychain:compliance_report) " +
          "--sbom $(location :workspace_sbom) " +
          "--sca-findings $(location :sca_findings_filtered.json) " +
          "--license-report $(location :license_report) " +
          "--output-dir $$(dirname $(location compliance-reports/executive_summary.html)) " +
          "--templates-dir=tools/supplychain/templates/compliance " +
          "--company-name=\"BazBOM Project\" " +
          "--formats html",
    tools = ["//tools/supplychain:compliance_report"],
    visibility = ["//visibility:public"],
)
