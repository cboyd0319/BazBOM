name: Dependency Review

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Restrict permissions following PYSEC_OMEGA standards
permissions:
  contents: read

jobs:
  dependency-review:
    name: Dependency Security Review
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    permissions:
      contents: read
      pull-requests: write  # For PR comments
    
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false
      
      - name: Dependency Review
        uses: actions/dependency-review-action@f30a9b4af2e5a0d6306c1e9346ce0abe35f4c1ab # v5.0.0
        with:
          # Fail on high or critical vulnerabilities
          fail-on-severity: high
          
          # Block GPL licenses (if configured)
          deny-licenses: GPL-2.0, GPL-3.0, AGPL-3.0
          
          # Allow common permissive licenses
          allow-licenses: Apache-2.0, MIT, BSD-2-Clause, BSD-3-Clause, ISC
          
          # Comment on PRs with findings
          comment-summary-in-pr: always
          
          # Show detailed vulnerability information
          vulnerability-check: true
          
          # Check license compatibility
          license-check: true
          
          # Warn on deprecated packages
          warn-on-openssf-scorecard-level: 3
      
      - name: Upload dependency graph
        uses: actions/upload-artifact@84480863f228bb9747b473957fcc9e309aa96097 # v4.4.2
        if: always()
        with:
          name: dependency-review-graph
          path: dependency-graph.json
          retention-days: 30
          if-no-files-found: warn

  pip-audit:
    name: Python Dependency Audit
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false
      
      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: '3.12'
          cache: 'pip'
      
      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit
      
      - name: Audit runtime dependencies
        run: |
          echo "## Runtime Dependencies" >> $GITHUB_STEP_SUMMARY
          if [ -f requirements.txt ]; then
            pip-audit -r requirements.txt --format json --output runtime-audit.json || true
            pip-audit -r requirements.txt --format markdown >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No runtime dependencies" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Audit test dependencies
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Dependencies" >> $GITHUB_STEP_SUMMARY
          if [ -f requirements-test.txt ]; then
            pip-audit -r requirements-test.txt --format json --output test-audit.json || true
            pip-audit -r requirements-test.txt --format markdown >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No test dependencies" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Audit security tools
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Security Tools" >> $GITHUB_STEP_SUMMARY
          if [ -f requirements-security.txt ]; then
            pip-audit -r requirements-security.txt --format json --output security-audit.json || true
            pip-audit -r requirements-security.txt --format markdown >> $GITHUB_STEP_SUMMARY || echo "No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ No security tool dependencies" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Upload audit results
        uses: actions/upload-artifact@84480863f228bb9747b473957fcc9e309aa96097 # v4.4.2
        if: always()
        with:
          name: pip-audit-results
          path: |
            runtime-audit.json
            test-audit.json
            security-audit.json
          retention-days: 30
          if-no-files-found: warn

  osv-scanner:
    name: OSV Vulnerability Scanner
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false
      
      - name: Run OSV Scanner
        uses: google/osv-scanner-action@v2.2.3
        with:
          scan-args: |-
            --lockfile=requirements.txt
            --lockfile=requirements-test.txt
            --lockfile=requirements-security.txt
            --format=json
            --output=osv-results.json
        continue-on-error: true
      
      - name: Upload OSV results
        uses: github/codeql-action/upload-sarif@6db8d6351fd0be61f9ed8ebd12ccd35dcec51fea # v3.27.9
        if: always() && hashFiles('osv-results.sarif') != ''
        with:
          sarif_file: osv-results.sarif
          category: osv-scanner
        continue-on-error: true
      
      - name: Upload OSV JSON
        uses: actions/upload-artifact@84480863f228bb9747b473957fcc9e309aa96097 # v4.4.2
        if: always()
        with:
          name: osv-scanner-results
          path: osv-results.json
          retention-days: 30
          if-no-files-found: warn

  hash-verification:
    name: Verify Dependency Hashes
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    permissions:
      contents: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          persist-credentials: false
      
      - name: Set up Python
        uses: actions/setup-python@0b93645e9fea7318ecaed2b359559ac225c90a2b # v5.3.0
        with:
          python-version: '3.12'
      
      - name: Verify requirements.txt has hashes
        run: |
          echo "## Hash Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          check_hashes() {
            local file=$1
            if [ ! -f "$file" ]; then
              echo "⚠️ $file not found" >> $GITHUB_STEP_SUMMARY
              return 0
            fi
            
            # Check if file has hash entries
            if grep -q "^.*--hash=sha256:" "$file"; then
              local hash_count=$(grep -c "^.*--hash=sha256:" "$file")
              echo "✅ $file: $hash_count hashes verified" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ $file: NO HASHES FOUND (security risk)" >> $GITHUB_STEP_SUMMARY
              return 1
            fi
          }
          
          EXIT_CODE=0
          check_hashes "requirements.txt" || EXIT_CODE=1
          check_hashes "requirements-test.txt" || EXIT_CODE=1
          check_hashes "requirements-security.txt" || EXIT_CODE=1
          
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ $EXIT_CODE -eq 0 ]; then
            echo "✅ All requirements files have SHA256 hashes" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some requirements files missing hashes" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Generate hashes with: pip-compile --generate-hashes requirements.in" >> $GITHUB_STEP_SUMMARY
          fi
          
          exit $EXIT_CODE
      
      - name: Verify pip-tools is available
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Dependency Lock Tools" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f requirements.in ] || [ -f requirements-test.in ] || [ -f requirements-security.in ]; then
            echo "✅ .in files found (source requirements)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "To update locked requirements:" >> $GITHUB_STEP_SUMMARY
            echo '```bash' >> $GITHUB_STEP_SUMMARY
            echo "pip install pip-tools" >> $GITHUB_STEP_SUMMARY
            echo "pip-compile --generate-hashes requirements.in" >> $GITHUB_STEP_SUMMARY
            echo "pip-compile --generate-hashes requirements-test.in" >> $GITHUB_STEP_SUMMARY
            echo "pip-compile --generate-hashes requirements-security.in" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ No .in files found" >> $GITHUB_STEP_SUMMARY
          fi

  summary:
    name: Security Review Summary
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [dependency-review, pip-audit, osv-scanner, hash-verification]
    if: always()
    
    permissions:
      contents: read
    
    steps:
      - name: Generate summary
        run: |
          echo "## 🔒 Dependency Security Review Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All dependency security checks have been executed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Checks Performed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ GitHub Dependency Review" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ pip-audit vulnerability scanning" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ OSV Scanner" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Hash verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Review the individual job outputs for detailed results." >> $GITHUB_STEP_SUMMARY
