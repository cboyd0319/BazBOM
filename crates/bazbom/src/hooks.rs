// Pre-commit hook installation and management for BazBOM
// Enables automatic vulnerability scanning before commits

use anyhow::{Context, Result};
use std::fs;
use std::path::{Path, PathBuf};

pub struct HooksConfig {
    pub policy_file: String,
    pub fast_mode: bool,
}

/// Install pre-commit hook in the current git repository
pub fn install_hooks(config: &HooksConfig) -> Result<()> {
    let git_hooks_dir = PathBuf::from(".git/hooks");
    
    if !git_hooks_dir.exists() {
        anyhow::bail!("Not a git repository (no .git/hooks directory found)");
    }

    let pre_commit_hook = git_hooks_dir.join("pre-commit");
    let hook_script = generate_hook_script(config);

    fs::write(&pre_commit_hook, hook_script)
        .with_context(|| format!("failed to write pre-commit hook to {:?}", pre_commit_hook))?;

    // Make executable (Unix only)
    #[cfg(unix)]
    {
        use std::os::unix::fs::PermissionsExt;
        let mut perms = fs::metadata(&pre_commit_hook)?.permissions();
        perms.set_mode(0o755);
        fs::set_permissions(&pre_commit_hook, perms)?;
    }

    println!("‚úÖ Installed pre-commit hook: {}", pre_commit_hook.display());
    println!("‚úÖ Configured {} scan mode", if config.fast_mode { "fast" } else { "full" });
    
    if Path::new(&config.policy_file).exists() {
        println!("‚úÖ Using policy file: {}", config.policy_file);
    } else {
        println!("‚ö†Ô∏è  Policy file not found: {}", config.policy_file);
        println!("   Create {} to enforce policies", config.policy_file);
    }

    Ok(())
}

/// Generate the pre-commit hook script content
fn generate_hook_script(config: &HooksConfig) -> String {
    let fast_flag = if config.fast_mode { " --fast" } else { "" };
    let policy_arg = if config.policy_file != "bazbom.yml" {
        format!(" --policy={}", config.policy_file)
    } else {
        String::new()
    };

    format!(r#"#!/bin/bash
# BazBOM pre-commit hook
# Auto-generated by `bazbom install-hooks`
# 
# This hook runs BazBOM vulnerability scanning before allowing commits.
# To bypass this hook temporarily, use: git commit --no-verify

set -e

echo "üîç Scanning dependencies with BazBOM..."

# Create temporary output directory
BAZBOM_TMP=$(mktemp -d)
trap "rm -rf $BAZBOM_TMP" EXIT

# Run BazBOM scan
if ! bazbom scan{fast} --out-dir "$BAZBOM_TMP" . > /dev/null 2>&1; then
  echo ""
  echo "‚ùå BazBOM scan failed"
  echo "   Check that bazbom is installed and in your PATH"
  exit 1
fi

# Check policy if policy file exists
if [ -f "{policy}" ]; then
  echo "üìã Checking policy: {policy}..."
  
  if ! bazbom policy check{policy_arg} > /dev/null 2>&1; then
    echo ""
    echo "‚ùå Commit blocked by BazBOM policy violations"
    echo ""
    echo "Run 'bazbom scan' to see details"
    echo "Run 'bazbom fix --suggest' for remediation guidance"
    echo "Or bypass with: git commit --no-verify"
    exit 1
  fi
fi

echo "‚úÖ No policy violations. Proceeding with commit."
exit 0
"#,
        fast = fast_flag,
        policy = config.policy_file,
        policy_arg = policy_arg
    )
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_generate_hook_script_default() {
        let config = HooksConfig {
            policy_file: "bazbom.yml".to_string(),
            fast_mode: false,
        };
        let script = generate_hook_script(&config);
        
        assert!(script.contains("#!/bin/bash"));
        assert!(script.contains("bazbom scan"));
        assert!(script.contains("bazbom policy check"));
        assert!(!script.contains("--fast"));
        assert!(script.contains("bazbom.yml"));
    }

    #[test]
    fn test_generate_hook_script_fast_mode() {
        let config = HooksConfig {
            policy_file: "bazbom.yml".to_string(),
            fast_mode: true,
        };
        let script = generate_hook_script(&config);
        
        assert!(script.contains("bazbom scan --fast"));
    }

    #[test]
    fn test_generate_hook_script_custom_policy() {
        let config = HooksConfig {
            policy_file: "custom-policy.yml".to_string(),
            fast_mode: false,
        };
        let script = generate_hook_script(&config);
        
        assert!(script.contains("custom-policy.yml"));
        assert!(script.contains("--policy=custom-policy.yml"));
    }

    #[test]
    fn test_generate_hook_script_bypass_instructions() {
        let config = HooksConfig {
            policy_file: "bazbom.yml".to_string(),
            fast_mode: false,
        };
        let script = generate_hook_script(&config);
        
        assert!(script.contains("git commit --no-verify"));
    }
}
